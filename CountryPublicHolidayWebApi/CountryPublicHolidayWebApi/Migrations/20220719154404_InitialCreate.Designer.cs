// <auto-generated />
using System;
using DataAccess.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CountryPublicHolidayWebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220719154404_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Entity.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Date")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Date");

                    b.Property<int>("DayOfWeek")
                        .HasMaxLength(10)
                        .HasColumnType("INT")
                        .HasColumnName("DayOfWeek");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(200)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Name");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("SupportedCountryId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("RegionId")
                        .IsUnique()
                        .HasFilter("[RegionId] IS NOT NULL");

                    b.HasIndex("SupportedCountryId")
                        .IsUnique()
                        .HasFilter("[SupportedCountryId] IS NOT NULL");

                    b.ToTable("Holiday", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entity.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Name");

                    b.Property<int>("SupportedCountryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupportedCountryId");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entity.SupportedCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("CountryCode");

                    b.Property<string>("CountryName")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("CountryName");

                    b.Property<string>("FromDate")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("FromDate");

                    b.Property<string>("HolidayTypes")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR(500)")
                        .HasColumnName("HolidayTypes");

                    b.Property<string>("ToDate")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("ToDate");

                    b.HasKey("Id");

                    b.ToTable("SupportedCountry", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entity.Holiday", b =>
                {
                    b.HasOne("DataAccess.Entity.Region", "Region")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entity.Holiday", "RegionId");

                    b.HasOne("DataAccess.Entity.SupportedCountry", "SupportedCountry")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entity.Holiday", "SupportedCountryId");

                    b.Navigation("Region");

                    b.Navigation("SupportedCountry");
                });

            modelBuilder.Entity("DataAccess.Entity.Region", b =>
                {
                    b.HasOne("DataAccess.Entity.SupportedCountry", "SupportedCountry")
                        .WithMany("Regions")
                        .HasForeignKey("SupportedCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportedCountry");
                });

            modelBuilder.Entity("DataAccess.Entity.SupportedCountry", b =>
                {
                    b.Navigation("Regions");
                });
#pragma warning restore 612, 618
        }
    }
}
